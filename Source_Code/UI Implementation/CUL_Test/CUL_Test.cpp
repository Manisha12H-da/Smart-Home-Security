
// CUL_Test.cpp: Definiert das Klassenverhalten für die Anwendung.
//

#include "stdafx.h"
#include "CUL_Test.h"
#include "CUL_TestDlg.h"
#pragma warning(disable : 4996)
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
using namespace System;
using namespace System::IO::Ports;
using namespace System::IO;

// CCUL_TestApp

BEGIN_MESSAGE_MAP(CCUL_TestApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CCUL_TestApp-Erstellung

CCUL_TestApp::CCUL_TestApp()
{

	// Pfeuffer Start
	// There is also CWinApp::ParseCommandLine() that you may find useful.
	LPTSTR xx = m_lpCmdLine;

	// Pfeuffer Ende

	// Alle wichtigen Initialisierungen in InitInstance positionieren
}


// Das einzige CCUL_TestApp-Objekt

CCUL_TestApp theApp;


// CCUL_TestApp-Initialisierung

BOOL CCUL_TestApp::InitInstance()
{
	CWinApp::InitInstance();

	SetRegistryKey(_T("Applications generated by the local application wizard"));

	CCUL_TestDlg dlg;

	// Pfeuffer Start
	char	Meldung[256];		// Puffer für Meldungstexte

	// Pfad zur INI-Datei (cul.ini) setzen
	//GetEnvironmentVariable("HOMEDRIVE", m_IniFileName, sizeof(m_IniFileName));
	//int cDriveLaenge = strlen(m_IniFileName);
	//GetEnvironmentVariable("HOMEPATH", m_IniFileName + cDriveLaenge, sizeof(m_IniFileName) - cDriveLaenge);
	
	strncat(m_IniFileName, ".\\CUL.ini", sizeof(m_IniFileName));
	char	acComPort[10] = {};
	// get available port names using the Serial Port of System
	//array <Object^>^ 
	array<Object^>^ objectArray= SerialPort::GetPortNames();
	int i, j;
	for each (Object^ anArray in objectArray)
	{
		j = anArray->ToString()->Length;
			for (i = 0; i < j; i++)
			{
				acComPort[i] = objectArray[0]->ToString()[i];
			}
			break;
	}
		// add string array to combobox
		if ((0 == strcmp("", acComPort)))
		{
			_snprintf(Meldung, sizeof(Meldung), "Cannot find Com-Port.");
			MessageBoxA(dlg.GetSafeHwnd(), Meldung, NULL, MB_OK | MB_ICONERROR);
			return FALSE;
		}

	
	if (!m_CulComPort.open(acComPort, true))
	{
		_snprintf(Meldung, sizeof(Meldung), "Cannot open %s Port.", acComPort);
		MessageBoxA(dlg.GetSafeHwnd(), Meldung, NULL, MB_OK | MB_ICONERROR);
		return FALSE;
	}
	m_CulComPort.configureUART();
	m_CulComPort.setReadTimeout(0);					// Z u   K l ä r e n 
	m_CulAsync.SetSerialPort(&m_CulComPort);
	_snprintf(m_ConnectString, sizeof(Meldung), "Connected to: %s", acComPort);
	dlg.SetConnectString(m_ConnectString);
	dlg.SetIniFileName(m_IniFileName);
	dlg.SetCul(&m_CulAsync);

	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();

	return FALSE;
}

